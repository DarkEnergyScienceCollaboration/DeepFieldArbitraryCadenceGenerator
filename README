Some notes on the LSST Deep Field Arbitrary Cadence Generator,
contact David Cinabro, cinabro@physics.wayne.edu, with questions,
constructive criticism, etc.

This generates an arbitrary cadence for LSST Deep Field observations
for supernova simulations using SNANA.   It takes a simple text file input
and outputs an SNANA SIMLIB.  See below for examples of how to make
it work.

This version 1 April 2013, and you should consider this version 1.0

What you should find in this repository:
README_DFACG - this file, notes and instructions
lsstdfacg.f - fortran to take simple text file and generate input
              for OpsimObs
M.lsstdfacg - Example makefile for the above.  You will have to
              edit to make it work for you.
lsstsimlib.f - fortran to take output of OpsimObs to produce SNANA simlib
M.lsstsimlib - Example makefile for the above.  You will have to
               edit to make it work for you
myLSSTdfacg.dat - example file to generate an arbitrary cadence.
                  Input to lsstdfacg.f
myLSSTdfacg_OpsimObs.input - example output of lsstdfacg.f, input to OpsimObs
myLSSTdfacg_OpsimObs.output - example output of OpsimObs.  This contains
                              many views that should not be used due to
                              weather, downtime, un-needed make-ups, etc.
myLSSTdfacg_OpsimObs_pro.output - example second output of lsstdfacg.f, 
                                  processed output of OpsimObs, input to
                                  lsstsimlib.f.  All the views in here
                                  are usable.
myLSSTdfacg.SIMLIB - example output of lsstsimlib.f, input for SN light curve
                     generation by SNANA
deepfields.dat - list and notes about the deep fields that have appeared
                 in the various versions of the LSST Opsim.
generate_lsstdfacg.cmd - unix shell script that automates the production
                         of arbitrary cadence.  You have to edit to
                         get it work for you by defining some directories.

Before beginning Lynne Jones' OpsimObs needs to be installed
and working.  It can be found on github and lives here:

https://github.com/rhiannonlynne/OpsimObs

It depends on another LSST package called Throughputs and the
Python implementation of the slalib, see the documentation
for OpsimObs.  All this needs a fairly modern version of
Python.  Just to recall OpsimObs takes in an LSST "view",
RA, DEC, filter, mjd, and readout time, and produces the
observing conditions such as sky noise, seeing, mag limit,
weather, etc.

The basic idea is to take a small control file, process it
with a couple bits of fortran from David Cinabro, run it
through Lynne's OpsimObs, process that with more fortran
from Cinabro, and generate a SNANA SIMLIB.  All this is very
fast and a new SIMLIB can be generated in a few minutes for
the full 10 years of the LSST survey.

The control file, which you have to edit looks like this:

# Comments begin with #, blank lines are OK too.  Anything else
# that is not a recognized keyword will cause the program to stop.

# Skip Moon Bright Time, larger fractions of this % Moon illumination
# will be skipped.  75.0 is the default if you do not have this in.
MOONL: 75.0

# Make up for missed observing epochs.  The weather is very good at the
# site, about 95% of the desired observations are made, so the makeup is 
# implemented very simply.  If an observation is
# missed one night, then the next night a repeat will be tried.  That
# is it.  The default is to make up.  Set it to 0 if you do not want
# to make up.  
MAKEUP: 1

# Airmass cut.  Observations at AIRMASS higher than this will be skipped.
# 2.0 is the default.
AIRMASS: 2.0

# Now begins the fields of the observations
# Field ID RA(degrees) DEC(degrees) Start(Years) End(Years)
# SNANA expects each field to have a unique ID
FIELDID: 1427
FIELDRA: 53.008961
FIELDDEC: -27.438828
FIELDSTART: 0.0 
FIELDEND: 10.0

# For the field you then specify the filters to be used, the cadence
# of the visits in days, and the exposure time in seconds.  The standard
# LSST exposure is 34 seconds and most of the Deep Fields are observed
# with about 20 standard exposures with each visit.
# Filter Cadence(days) Exposure (Sec 34 = 1 LSST standard exposure)
FIELDFILTER: u
FIELDCAD: 3
FIELDEXP: 680

FIELDFILTER: g
FIELDCAD: 3
FIELDEXP: 680

FIELDFILTER: r
FIELDCAD: 3
FIELDEXP: 680

FIELDFILTER: i
FIELDCAD: 3
FIELDEXP: 680

FIELDFILTER: z
FIELDCAD: 3
FIELDEXP: 680

FIELDFILTER: y
FIELDCAD: 3
FIELDEXP: 680

# Note that the camera only holds five filters and thus each night
# only five filters can be used.  The above will result, barring
# missed observations, in the ugriz filters every 3 nights, and the
# y filter on the nights after the ugriz observations.  The algorithm 
# is to displace the last filter in the list by a day when six filters 
# are asked for on one night.

# On to the next field, only observed for 5 years, for example.
# Currently there is a limit of 100 fields, but this could easily changed.
# Let cinabro know if 100 fields is not enough.
FIELDID: 519
FIELDRA: 69.453789
FIELDDEC: -53.470478
FIELDSTART: 0.0 
FIELDEND: 5.0

# Filters and cadences in this field.  There is no reason to
# make the cadences and exposure times the same for all the
# filters
FIELDFILTER: g
FIELDCAD: 4
FIELDEXP: 340
FIELDFILTER: r
FIELDCAD: 2
FIELDEXP: 680
FIELDFILTER: i
FIELDCAD: 2
FIELDEXP: 680
FIELDFILTER: z
FIELDCAD: 4
FIELDEXP: 680
FIELDFILTER: y
FIELDCAD: 4
FIELDEXP: 340

# Now the second 5 years of that field doing something different.
FIELDID: 519
FIELDRA: 69.453789
FIELDDEC: -53.470478
FIELDSTART: 5.0 
FIELDEND: 10.0
FIELDFILTER: g
FIELDCAD: 2
FIELDEXP: 680
FIELDFILTER: r
FIELDCAD: 2
FIELDEXP: 680
FIELDFILTER: i
FIELDCAD: 2
FIELDEXP: 680

Then you simply run the shell script and it will automate the 
production of the SNANA simlib.

> generate_lsstdfacg.cmd myLSSTdfacg

which will read myLSSTdfacg.dat, it expects that .dat is the file extension,
and produce myLSSTdfacg.SIMLIB for SNANA's light curve generation.  See
generate_lsstdfacg.cmd for some directories that you have to define
to make it work.
